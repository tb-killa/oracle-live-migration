name: Build Oracle Migration Live ISO

on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "0 2 * * *"  # t√§glich um 2 Uhr nachts
  workflow_dispatch:

env:
  ISO_URL: "https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/OracleLinux-R9-U3-x86_64-dvd.iso"
  ISO_NAME: "OracleLinux-R9-U3-x86_64-dvd.iso"
  ISO_DIR: "migration-live"
  BUILD_SCRIPT: "build_migration_iso.sh"
  CACHE_KEY: "oraclelinux9u3-dvd-cache"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: oraclelinux:9

    steps:
      # === 1Ô∏è‚É£ Repository Checkout ===
      - name: üß© Checkout Repository
        uses: actions/checkout@v4

      # === 2Ô∏è‚É£ Struktur- und Berechtigungscheck ===
      - name: üîç Repository Struktur pr√ºfen
        run: |
          echo "=== Repository Struktur pr√ºfen ==="
          find . -maxdepth 3 -type f

          REQUIRED_FILES=(
            "$BUILD_SCRIPT"
            "overlay/usr/local/bin/migration-gui.sh"
            "overlay/root/install-tools.sh"
            "overlay/etc/systemd/system/migration-autostart.service"
          )

          for f in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$f" ]; then
              echo "‚ùå Fehlende Datei: $f"
              exit 1
            else
              echo "‚úÖ Gefunden: $f"
            fi
          done

          # CRLF-Pr√ºfung
          if grep -rIUls $'\r' overlay/ >/dev/null 2>&1; then
            echo "‚ö†Ô∏è CRLF-Zeilenenden gefunden ‚Äì bitte korrigieren!"
            exit 1
          else
            echo "‚úÖ Keine CRLF-Zeilenenden gefunden."
          fi

          # Ausf√ºhrungsrechte pr√ºfen + reparieren
          for file in "$BUILD_SCRIPT" overlay/usr/local/bin/migration-gui.sh; do
            if [ ! -x "$file" ]; then
              echo "‚öôÔ∏è  Repariere Ausf√ºhrungsrecht: $file"
              chmod +x "$file"
            fi
          done
          echo "‚úÖ Alle erforderlichen Dateien ausf√ºhrbar."

      # === 3Ô∏è‚É£ ISO Cache pr√ºfen ===
      - name: üóÉÔ∏è Lade ISO Cache
        id: cache_iso
        uses: actions/cache@v4
        with:
          path: ${{ env.ISO_DIR }}/${{ env.ISO_NAME }}
          key: ${{ env.CACHE_KEY }}

      - name: üóÉÔ∏è DNF Cache
        uses: actions/cache@v4
        with:
          path: /var/cache/dnf
          key: dnf-cache-${{ runner.os }}-${{ hashFiles('**/build_migration_iso.sh') }}
          restore-keys: |
            dnf-cache-${{ runner.os }}-

      # === 4Ô∏è‚É£ Abh√§ngigkeiten installieren ===
      - name: ‚öôÔ∏è Installiere Build-Abh√§ngigkeiten
        run: |
          dnf -y install oracle-epel-release-el9
          dnf -y install wget rsync xorriso zip unzip p7zip p7zip-plugins jq diffutils coreutils util-linux tar

      # === 5Ô∏è‚É£ ISO Download + Verifikation ===
      - name: üì¶ Lade oder pr√ºfe Oracle Linux ISO
        run: |
          set -e
          mkdir -p $ISO_DIR
          ISO_PATH="$ISO_DIR/$ISO_NAME"

          if [ -f "$ISO_PATH" ]; then
            echo "‚úÖ ISO bereits im Cache: $ISO_PATH"
          else
            echo "üì¶ Lade ISO von $ISO_URL ..."
            wget --progress=dot:giga -O "$ISO_PATH" "$ISO_URL"
            echo "‚úÖ Download abgeschlossen."
          fi

          echo "üîç Pr√ºfe Datei-Infos:"
          ls -lh "$ISO_PATH"

          echo "üî¢ Berechne SHA256-Checksumme:"
          sha256sum "$ISO_PATH" | tee iso_checksum.txt

          # Pr√ºfe ob die Datei >1GB ist (Schnellpr√ºfung gegen defekte Downloads)
          FILESIZE=$(stat -c%s "$ISO_PATH")
          if [ "$FILESIZE" -lt 1000000000 ]; then
            echo "‚ùå ISO-Datei scheint besch√§digt oder unvollst√§ndig!"
            exit 1
          fi

          echo "‚úÖ ISO-Download erfolgreich validiert."

      # === 6Ô∏è‚É£ Build durchf√ºhren ===
      - name: üöÄ Starte ISO-Build
        run: |
          echo "üöÄ Starte ISO-Build..."
          bash "$BUILD_SCRIPT"

      # === 7Ô∏è‚É£ Teste ISO-Ergebnis ===
      - name: üß™ Teste erzeugte ISO
        run: |
          echo "üß™ Pr√ºfe erzeugte ISO..."
          ls -lh migration-live/*.iso || { echo "‚ùå Keine ISO erzeugt!"; exit 1; }
          ISO_FILE=$(ls migration-live/*.iso | head -n1)
          echo "‚úÖ ISO gefunden: $ISO_FILE"
          echo "üîç Teste Inhaltsverzeichnis:"
          xorriso -indev "$ISO_FILE" -toc | head -n 25

      # === 8Ô∏è‚É£ Changelog generieren ===
      - name: üìù Erzeuge Changelog
        run: |
          echo "üßæ Erzeuge Changelog..."
          mkdir -p changelog
          {
            echo "## Build vom $(date -u '+%Y-%m-%d %H:%M UTC')"
            echo
            echo "### Git √Ñnderungen:"
            git log -1 --pretty=format:"- %h %s (%an)"
            echo
            echo "### ISO Pr√ºfsumme:"
            cat iso_checksum.txt
            echo
            echo "### Paketliste (Top 40):"
            rpm -qa --qf "%{NAME}-%{VERSION}\n" | sort | head -n 40
          } > changelog/latest.md
          cat changelog/latest.md

      # === 9Ô∏è‚É£ Release ver√∂ffentlichen ===
      - name: üì§ Lade ISO in GitHub Releases hoch
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly-${{ github.run_number }}
          name: "Oracle Migration ISO Nightly Build #${{ github.run_number }}"
          body_path: changelog/latest.md
          files: |
            migration-live/*.iso
            iso_checksum.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
