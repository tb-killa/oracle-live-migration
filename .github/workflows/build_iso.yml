name: Build Oracle Migration Live ISO

on:
  push:
    branches: [ main ]
  schedule:
    - cron:  '0 2 * * *'   # t√§glich 02:00 UTC (03‚Äì04 Uhr Berlin)
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: oraclelinux:9
    permissions:
      contents: write  # f√ºr Release-Upload via GITHUB_TOKEN

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # üß∞ --- Repository Sanity Check mit GitHub-Annotations ---
      - name: Repository Sanity Check
        run: |
          echo "=== Repository Struktur pr√ºfen ==="
          ls -R | head -n 50
          echo

          missing=0

          REQUIRED_FILES=(
            "build_migration_iso.sh"
            "overlay/usr/local/bin/migration-gui.sh"
            "overlay/root/install-tools.sh"
            "overlay/etc/systemd/system/migration-autostart.service"
          )

          for f in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$f" ]; then
              echo "::error file=$f::Fehlende Pflichtdatei ($f)"
              echo "‚ùå Fehlt: $f"
              missing=1
            else
              echo "‚úÖ Gefunden: $f"
            fi
          done

          if [ $missing -ne 0 ]; then
            echo "::error::Mindestens eine Pflichtdatei fehlt ‚Äì Build abgebrochen!"
            exit 1
          fi

          # Pr√ºfen auf Windows-Zeilenenden
          badfiles=$(grep -Ilr $'\r' --include="*.sh" . || true)
          if [ -n "$badfiles" ]; then
            echo "‚ùå Dateien mit Windows-Zeilenenden gefunden:"
            echo "$badfiles"
            while IFS= read -r file; do
              echo "::error file=$file::Windows-Zeilenenden (CRLF) erkannt ‚Äì bitte 'dos2unix $file' ausf√ºhren!"
            done <<< "$badfiles"
            exit 1
          else
            echo "‚úÖ Keine CRLF-Zeilenenden gefunden."
          fi

          # Ausf√ºhrungsrechte pr√ºfen und ggf. reparieren
          for f in build_migration_iso.sh overlay/usr/local/bin/migration-gui.sh; do
            if [ ! -x "$f" ]; then
              echo "::warning file=$f::Fehlendes Ausf√ºhrungsrecht ‚Äì wird automatisch repariert."
              chmod +x "$f"
              echo "‚öôÔ∏è  Repariert: $f"
            else
              echo "‚úÖ Ausf√ºhrbar: $f"
            fi
          done

          # Service-ExecStart pr√ºfen
          SERVICE_FILE="overlay/etc/systemd/system/migration-autostart.service"
          EXEC_PATH=$(grep -E '^ExecStart=' "$SERVICE_FILE" | cut -d'=' -f2 | tr -d '\r\n' || true)
          if [ -z "$EXEC_PATH" ]; then
            echo "::error file=$SERVICE_FILE::ExecStart fehlt im systemd Service!"
            exit 1
          fi

          BASE_NAME=$(basename "$EXEC_PATH")
          if [ ! -f "overlay/usr/local/bin/$BASE_NAME" ]; then
            echo "::error file=$SERVICE_FILE::In ExecStart angegebene Datei ($BASE_NAME) existiert nicht!"
            exit 1
          fi
          if [ ! -x "overlay/usr/local/bin/$BASE_NAME" ]; then
            echo "::error file=overlay/usr/local/bin/$BASE_NAME::In ExecStart angegebene Datei ist nicht ausf√ºhrbar!"
            exit 1
          fi
          echo "‚úÖ Autostart-Service verweist auf ausf√ºhrbares Skript ($BASE_NAME)"
          echo "=== Preflight-Check bestanden ==="

      # --- ISO Cache ---
      - name: Cache Oracle ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: migration-live/OracleLinux-R9-U3-x86_64-dvd.iso
          key: oraclelinux-9u3-dvd

      - name: Download Oracle Linux 9 DVD
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          mkdir -p migration-live
          echo "Lade Oracle Linux 9 ISO..."
          curl -L -o migration-live/OracleLinux-R9-U3-x86_64-dvd.iso \
            https://download.oracle.com/otn-pub/isos/oraclelinux/OL9/u3/x86_64/OracleLinux-R9-U3-x86_64-dvd.iso

      # --- DNF Cache ---
      - name: Cache DNF packages
        uses: actions/cache@v4
        with:
          path: /var/cache/dnf
          key: dnf-cache-${{ runner.os }}-${{ hashFiles('overlay/root/install-tools.sh') }}

      # --- Build-Tools + EPEL ---
      - name: Install build dependencies
        run: |
          dnf -y install oracle-epel-release-el9
          dnf -y update
          dnf -y install p7zip p7zip-plugins rsync wget xorriso mkisofs diffutils coreutils util-linux zip tar

      # --- ISO Build ---
      - name: Build ISO
        run: |
          echo "Starte ISO-Build..."
          bash -x ./build_migration_iso.sh > build.log 2>&1 || (echo "::error::Build fehlgeschlagen ‚Äì siehe build.log"; tail -n 100 build.log; exit 1)

      # --- Changelog ---
      - name: Generate changelog
        run: |
          mkdir -p migration-live
          if [ -f migration-live/old_pkgs.txt ]; then
            diff -u migration-live/old_pkgs.txt migration-live/new_pkgs.txt > migration-live/CHANGELOG.txt || true
          else
            cp migration-live/new_pkgs.txt migration-live/CHANGELOG.txt
          fi
          cp migration-live/new_pkgs.txt migration-live/old_pkgs.txt

      # --- ISO Komprimieren ---
      - name: Compress ISO
        run: |
          cd migration-live
          7z a oracle-migration-live.7z oracle-migration-live.iso

      # --- Artefakte speichern ---
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oracle-migration-live
          path: |
            migration-live/oracle-migration-live.iso
            migration-live/oracle-migration-live.7z
            migration-live/CHANGELOG.txt

      # --- Release erstellen ---
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Oracle Migration Live v${{ github.run_number }}"
          body_path: migration-live/CHANGELOG.txt
          files: |
            migration-live/oracle-migration-live.iso
            migration-live/oracle-migration-live.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
