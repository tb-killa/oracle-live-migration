name: üß± Build Rocky 9.6 MATE Live Migration ISO (Phase 4.8 ‚Äì Auto-RAID Detect + DE Locale)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      # 1Ô∏è‚É£ Repository
      - name: üß∞ Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Basis-Tools
      - name: ‚öôÔ∏è Installiere Build- und Pr√ºf-Tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            xorriso genisoimage p7zip-full wget rsync syslinux-common \
            qemu-system-x86 qemu-utils ovmf mdadm lvm2 parted dosfstools \
            ntfs-3g locales jq file coreutils diffutils

      # 3Ô∏è‚É£ Cache f√ºr ISO
      - name: ‚ôªÔ∏è Cache Rocky 9.6 MATE ISO
        id: cache-rocky
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky96-mate-${{ hashFiles('.github/workflows/build_iso.yml') }}

      # 4Ô∏è‚É£ ISO herunterladen (falls nicht im Cache)
      - name: üì• Lade Rocky 9.6 MATE Live ISO
        if: steps.cache-rocky.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p .cache/iso
          ISO_URL="https://dl.rockylinux.org/vault/rocky/9.6/live/x86_64/Rocky-9-MATE-x86_64-latest.iso"
          ISO_FILE=".cache/iso/Rocky-9.6-MATE-x86_64.iso"
          echo "‚û°Ô∏è Lade $ISO_URL ..."
          wget -q --show-progress -O "$ISO_FILE" "$ISO_URL"
          test -s "$ISO_FILE"

      # 5Ô∏è‚É£ SHA-Check
      - name: üîê Pr√ºfe ISO-Integrit√§t
        run: |
          set -e
          ISO=".cache/iso/Rocky-9.6-MATE-x86_64.iso"
          echo "SHA256: $(sha256sum "$ISO")"
          file "$ISO"

      # 6Ô∏è‚É£ Entpacken
      - name: üß© Entpacke ISO
        run: |
          set -e
          mkdir -p migration-live/custom_iso
          7z x -y -o"migration-live/custom_iso" .cache/iso/Rocky-9.6-MATE-x86_64.iso >/dev/null

      # 7Ô∏è‚É£ Overlay + Auto-RAID + DE-Locale + Helper
      - name: üß± Erstelle Overlay-Inhalte
        run: |
          set -e
          OVER="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVER/usr/local/bin" "$OVER/etc/systemd/system" "$OVER/etc/X11/xorg.conf.d"
          mkdir -p "$OVER/home/liveuser/Desktop"

          # --- Sprache & Tastatur ---
          echo "LANG=de_DE.UTF-8" > "$OVER/etc/locale.conf"
          echo "KEYMAP=de" > "$OVER/etc/vconsole.conf"
          cat > "$OVER/etc/X11/xorg.conf.d/00-keyboard.conf" <<EOF
          Section "InputClass"
              Identifier "system-keyboard"
              MatchIsKeyboard "on"
              Option "XkbLayout" "de"
          EndSection
          EOF

          # --- Auto-RAID-Detection Script ---
          cat > "$OVER/usr/local/bin/auto_raid_detect.sh" <<'EOF'
          #!/bin/bash
          echo "[Auto-RAID-Detect] Starte Erkennung..." | tee /var/log/auto_raid.log
          for mod in dm_mod md_mod raid0 raid1 raid10 raid456 linear multipath; do
              modprobe "$mod" 2>>/var/log/auto_raid.log || true
          done
          echo "[Auto-RAID-Detect] Pr√ºfe bekannte Ger√§te..." | tee -a /var/log/auto_raid.log
          mdadm --assemble --scan >> /var/log/auto_raid.log 2>&1 || true
          vgchange -ay >> /var/log/auto_raid.log 2>&1 || true
          echo "[Auto-RAID-Detect] Ger√§te√ºbersicht:" | tee -a /var/log/auto_raid.log
          lsblk >> /var/log/auto_raid.log 2>&1
          EOF
          chmod +x "$OVER/usr/local/bin/auto_raid_detect.sh"

          # --- Systemd-Service f√ºr Auto-RAID ---
          cat > "$OVER/etc/systemd/system/auto-raid.service" <<EOF
          [Unit]
          Description=Automatische RAID/LVM Erkennung beim Start
          After=local-fs.target

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/auto_raid_detect.sh
          RemainAfterExit=yes

          [Install]
          WantedBy=multi-user.target
          EOF
          mkdir -p "$OVER/etc/systemd/system/multi-user.target.wants"
          ln -sf /etc/systemd/system/auto-raid.service "$OVER/etc/systemd/system/multi-user.target.wants/auto-raid.service"

          # --- Helper-Skripte (RAID, CA, v2v) ---
          cat > "$OVER/usr/local/bin/check_raid.sh" <<'EOF'
          #!/bin/bash
          LOG=~/Desktop/RAID_Report.txt
          echo "=== RAID/LVM Check ===" > "$LOG"
          date >> "$LOG"
          echo >> "$LOG"
          cat /proc/mdstat >> "$LOG" 2>/dev/null
          lvs >> "$LOG" 2>/dev/null
          lsblk >> "$LOG"
          echo "‚úÖ Bericht gespeichert unter \$LOG"
          EOF
          chmod +x "$OVER/usr/local/bin/check_raid.sh"

          cat > "$OVER/usr/local/bin/import_ca.sh" <<'EOF'
          #!/bin/bash
          echo "Beispiel:"
          echo "cp /run/media/liveuser/USB/ca.crt /etc/pki/ca-trust/source/anchors/"
          echo "update-ca-trust"
          EOF
          chmod +x "$OVER/usr/local/bin/import_ca.sh"

          cat > "$OVER/usr/local/bin/run_v2v.sh" <<'EOF'
          #!/bin/bash
          echo "virt-v2v Beispiel:"
          echo "virt-v2v -i disk /dev/sda -o rhv-upload -oc https://olvm/api -os storage --password-file /root/pw.txt"
          EOF
          chmod +x "$OVER/usr/local/bin/run_v2v.sh"

          # --- Desktop-Dateien ---
          echo "üß± Rocky Migration Live ‚Äì Auto-RAID aktiv" > "$OVER/home/liveuser/Desktop/00_README_DE.txt"
          echo "- RAID pr√ºfen: check_raid.sh" >> "$OVER/home/liveuser/Desktop/00_README_DE.txt"
          echo "- Migration starten: run_v2v.sh" >> "$OVER/home/liveuser/Desktop/00_README_DE.txt"
          echo "- CA importieren: import_ca.sh" >> "$OVER/home/liveuser/Desktop/00_README_DE.txt"
          cp "$OVER/usr/local/bin/"*.sh "$OVER/home/liveuser/Desktop/"
          chmod +x "$OVER/home/liveuser/Desktop/"*.sh

      # 8Ô∏è‚É£ Struktur-Check
      - name: üß© Struktur-Check
        run: |
          set -e
          echo "=== Pr√ºfe ISO-Struktur ==="
          test -f migration-live/custom_iso/isolinux/isolinux.bin
          test -f migration-live/custom_iso/images/efiboot.img

      # 9Ô∏è‚É£ Hybrid-ISO-Erzeugung
      - name: üíΩ Erzeuge Hybrid-ISO
        run: |
          set -e
          OUT="migration-live/rocky-migration-live.iso"
          VOL="Rocky-9-6-MATE-DE-RAID"
          MBR=$(find /usr/lib -name "isohdpfx.bin" | head -n1 || true)
          xorriso -as mkisofs \
            -V "$VOL" -o "$OUT" \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            ${MBR:+-isohybrid-mbr "$MBR"} -J -R -T migration-live/custom_iso
          ls -lh "$OUT"

      # üîü Mount-Check
      - name: üîç Mount- und Struktur-Validierung
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          MNT="./_mnt_iso"
          mkdir -p "$MNT"
          sudo mount -o loop "$ISO" "$MNT"
          echo "=== ISO-Inhalt (Top 20) ==="
          ls -lh "$MNT" | head -n 20
          sudo umount "$MNT"

      # 11Ô∏è‚É£ QEMU-Smoke-Test
      - name: üß™ QEMU-Boot-Test (UEFI)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          sudo apt-get install -y ovmf
          BIOS=$(find /usr/share -name "OVMF_CODE.fd" | head -n1)
          timeout 90s qemu-system-x86_64 \
            -cdrom "$ISO" -m 2048 -boot d -no-reboot \
            -nographic -serial mon:stdio -bios "$BIOS" -snapshot | tee bootlog.txt
          if grep -E 'Welcome to Rocky|Started GNOME' bootlog.txt; then
            echo "‚úÖ Boot erfolgreich erkannt"
          else
            echo "‚ö†Ô∏è Bootpr√ºfung unvollst√§ndig:"
            tail -n 25 bootlog.txt
          fi

      # 12Ô∏è‚É£ Artefakt-Upload
      - name: üì§ Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-9.6-mate-live-migration-autorai
          path: migration-live/rocky-migration-live.iso
