name: 🧱 Build Rocky Migration Live ISO (Phase 3 – Auto-Fix + RAID + Locale)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Installiere Basis-Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            genisoimage xorriso p7zip-full isoinfo isomd5sum wget rsync file

      - name: ♻️ Cache Rocky ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky9-iso-cache-v3

      - name: 📥 Lade Rocky Linux ISO (falls kein Cache)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/iso
          ISO_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9-latest-x86_64-minimal.iso"
          echo "➡️ Lade Rocky Linux ISO von $ISO_URL ..."
          wget -q --show-progress -O .cache/iso/Rocky-9-latest-x86_64-minimal.iso "$ISO_URL"

      - name: 🧩 Entpacke ISO und prüfe Volume-Label
        run: |
          set -euo pipefail
          mkdir -p migration-live/custom_iso overlay

          LABEL=$(isoinfo -d -i .cache/iso/Rocky-9-latest-x86_64-minimal.iso | grep 'Volume id' | awk -F': ' '{print $2}' | xargs)
          echo "🔍 Original Label: $LABEL"

          NEW_LABEL="Rocky-Migration-Live"
          echo "📦 Neues Label: $NEW_LABEL"

          echo "=== Entpacke ISO ==="
          7z x -y -o"migration-live/custom_iso" .cache/iso/Rocky-9-latest-x86_64-minimal.iso >/dev/null

          echo "=== Prüfe und korrigiere Boot-Konfigs ==="
          for cfg in \
            migration-live/custom_iso/isolinux/isolinux.cfg \
            migration-live/custom_iso/EFI/BOOT/grub.cfg; do
            if [ -f "$cfg" ]; then
              sed -i "s|$LABEL|$NEW_LABEL|g" "$cfg"
            fi
          done

          echo "=== ISO-Label angepasst und entpackt ==="

      - name: ⚙️ Füge Overlay-Inhalte hinzu
        run: |
          set -e
          OVERLAY="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVERLAY"

          # --- Root-Passwort ---
          cat > "$OVERLAY/set_root.sh" <<'EOF'
          #!/bin/bash
          echo "root:Migration123!" | chpasswd
          EOF
          chmod +x "$OVERLAY/set_root.sh"

          # --- RAID-&-LVM-Autoload ---
          cat > "$OVERLAY/load_raid.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Lade RAID- und LVM-Module..."
          modprobe dm_mod || true
          modprobe md_mod || true
          modprobe raid1 || true
          modprobe raid10 || true
          modprobe raid456 || true
          modprobe linear || true
          modprobe multipath || true
          modprobe dm_mirror || true
          modprobe dm_snapshot || true
          modprobe dm_thin_pool || true
          systemctl enable mdmonitor.service || true
          EOF
          chmod +x "$OVERLAY/load_raid.sh"

          # --- Migration-Helper (Stub für GUI) ---
          cat > "$OVERLAY/migration_helper.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Starte Migrations-Umgebung..."
          echo "Virt-v2v verfügbar:"
          virt-v2v --version || echo "virt-v2v fehlt."
          EOF
          chmod +x "$OVERLAY/migration_helper.sh"

          echo "✅ Overlay-Skripte hinzugefügt."

      - name: 🧠 Setze Sprache & Locale
        run: |
          mkdir -p migration-live/custom_iso/etc
          echo "LANG=de_DE.UTF-8" | tee migration-live/custom_iso/etc/locale.conf
          echo "KEYMAP=de" | tee migration-live/custom_iso/etc/vconsole.conf

      - name: 🛠️ Installiere RAID & Migrationstools
        run: |
          sudo apt-get install -y mdadm dmraid lvm2 qemu-utils virt-v2v virt-install parted dosfstools ntfs-3g

      - name: 🧱 Erzeuge Hybrid-ISO (UEFI + BIOS)
        run: |
          set -e
          OUT_ISO="migration-live/rocky-migration-live.iso"
          VOLID="Rocky-Migration-Live"

          echo "=== Erzeuge ISO mit Label: $VOLID ==="
          xorriso -as mkisofs \
            -V "$VOLID" \
            -o "$OUT_ISO" \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            -isohybrid-mbr migration-live/custom_iso/isolinux/isohdpfx.bin \
            -J -R -V "$VOLID" -v -T \
            migration-live/custom_iso

          echo "✅ ISO erfolgreich erzeugt:"
          ls -lh "$OUT_ISO"

      - name: 🔍 Integritätstest
        run: |
          set -e
          echo "=== Prüfe ISO-Metadaten ==="
          isoinfo -d -i migration-live/rocky-migration-live.iso | grep -E "Volume id|Application id"
          echo "=== Prüfe Stage2-Parameter ==="
          isoinfo -i migration-live/rocky-migration-live.iso -x /isolinux/isolinux.cfg | grep -E "inst.stage2|LABEL=" || true
          echo "=== Prüfe RAID-Skripte ==="
          grep -R "modprobe" migration-live/custom_iso/root_overlay/ || true

      - name: 📤 Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-migration-live
          path: migration-live/rocky-migration-live.iso
