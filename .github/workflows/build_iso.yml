name: üß± Build Rocky 9.6 MATE Live Migration ISO (Phase 4.3 Stable)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Repository holen
      - name: üß∞ Checkout Repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Basis-Tools f√ºr Build + Tests
      - name: üì¶ Installiere Build- & Test-Tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            genisoimage xorriso p7zip-full wget rsync file syslinux-common \
            mdadm lvm2 qemu-utils qemu-system-x86 ovmf parted dosfstools ntfs-3g \
            locales console-data

      # 3Ô∏è‚É£ ISO-Cache
      - name: ‚ôªÔ∏è Cache Rocky 9.6 MATE Live ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky9.6-mate-live-cache-v1

      # 4Ô∏è‚É£ ISO-Download (nur wenn kein Cache)
      - name: üì• Lade Rocky 9.6 MATE Live ISO (falls kein Cache)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p .cache/iso
          ISO_URL="https://dl.rockylinux.org/vault/rocky/9.6/live/x86_64/Rocky-9-MATE-x86_64-latest.iso"
          echo "‚û°Ô∏è Lade Rocky 9.6 MATE Live ISO von $ISO_URL ..."
          wget -q --show-progress -O .cache/iso/Rocky-9.6-MATE-x86_64.iso "$ISO_URL"
          test -s .cache/iso/Rocky-9.6-MATE-x86_64.iso

      # 5Ô∏è‚É£ Entpacke & Label pr√ºfen
      - name: üß© Entpacke ISO & pr√ºfe Volume-Label
        run: |
          set -euo pipefail
          mkdir -p migration-live/custom_iso
          ISO_PATH=".cache/iso/Rocky-9.6-MATE-x86_64.iso"
          test -s "$ISO_PATH" || { echo "‚ùå ISO fehlt: $ISO_PATH"; exit 1; }

          LABEL=$(xorriso -indev "$ISO_PATH" -pvd_info 2>&1 | sed -n 's/^Volume id: *//p' | head -n1)
          echo "üîç Original Label: ${LABEL:-<leer>}"

          echo "=== Entpacke ISO ==="
          7z x -y -o"migration-live/custom_iso" "$ISO_PATH" >/dev/null
          NEW_LABEL="Rocky-Migration-Live"

          for cfg in migration-live/custom_iso/isolinux/isolinux.cfg migration-live/custom_iso/EFI/BOOT/grub.cfg; do
            [ -f "$cfg" ] || continue
            [ -n "${LABEL:-}" ] && sed -i "s|$LABEL|$NEW_LABEL|g" "$cfg" || true
          done
          echo "‚úÖ Label korrigiert auf: $NEW_LABEL"

      # 6Ô∏è‚É£ Overlay (root, RAID/LVM, Helper)
      - name: ‚öôÔ∏è Overlay vorbereiten (Root-PW, RAID/LVM, Helper)
        run: |
          set -e
          OVER="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVER"

          cat > "$OVER/set_root.sh" <<'EOF'
          #!/bin/bash
          echo "root:Migration123!" | chpasswd
          EOF
          chmod +x "$OVER/set_root.sh"

          cat > "$OVER/load_raid.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Lade RAID/LVM-Module ..."
          for m in dm_mod md_mod raid1 raid10 raid456 linear multipath dm_mirror dm_snapshot dm_thin_pool; do
            modprobe "$m" 2>/dev/null || true
          done
          systemctl enable mdmonitor.service 2>/dev/null || true
          EOF
          chmod +x "$OVER/load_raid.sh"

          cat > "$OVER/migration_helper.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Pr√ºfe Migrations-Tools ..."
          for bin in virt-v2v qemu-img mdadm lvm; do
            if command -v "$bin" >/dev/null 2>&1; then
              echo " ‚úî $bin gefunden"
            else
              echo " ‚ö† $bin NICHT gefunden"
            fi
          done
          echo "Hinweis: virt-v2v kann im Live-System per dnf install virt-v2v nachinstalliert werden."
          EOF
          chmod +x "$OVER/migration_helper.sh"

      # 7Ô∏è‚É£ Sprache & Tastatur
      - name: üß† Setze DE-Locale & Keyboard
        run: |
          set -e
          mkdir -p migration-live/custom_iso/etc
          echo "LANG=de_DE.UTF-8" | tee migration-live/custom_iso/etc/locale.conf
          echo "KEYMAP=de"        | tee migration-live/custom_iso/etc/vconsole.conf

      # 8Ô∏è‚É£ Pr√ºfe Live-Assets
      - name: üîé Pr√ºfe Live-Assets (SquashFS, EFIboot, Isolinux)
        run: |
          set -e
          test -f migration-live/custom_iso/isolinux/isolinux.bin || { echo "‚ùå isolinux.bin fehlt"; exit 1; }
          test -f migration-live/custom_iso/images/efiboot.img    || { echo "‚ùå efiboot.img fehlt"; exit 1; }
          echo "‚úÖ Boot-Dateien gefunden."

      # 9Ô∏è‚É£ ISO erzeugen
      - name: üß± Erzeuge Hybrid-ISO (UEFI + BIOS)
        run: |
          set -e
          OUT="migration-live/rocky-migration-live.iso"
          VOL="Rocky-Migration-Live"
          MBR_OPT=""

          for p in /usr/lib/ISOLINUX/isohdpfx.bin /usr/lib/syslinux/mbr/isohdpfx.bin; do
            if [ -f "$p" ]; then
              echo "‚úÖ Verwende isohybrid-MBR: $p"
              MBR_OPT="-isohybrid-mbr $p"
              break
            fi
          done

          xorriso -as mkisofs \
            -V "$VOL" \
            -o "$OUT" \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            $MBR_OPT \
            -J -R -T -v \
            migration-live/custom_iso

          echo "‚úÖ ISO erzeugt:"
          ls -lh "$OUT"

      # üîü Strukturpr√ºfung
      - name: üß© Mount & Struktur-Check
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          MNT="./_mnt_iso"
          mkdir -p "$MNT"
          sudo mount -o loop "$ISO" "$MNT"
          echo "=== Inhalt des ISOs ==="
          ls -lh "$MNT" | head -n 20
          sudo umount "$MNT"
          echo "‚úÖ Struktur-Check OK."

      # 11Ô∏è‚É£ QEMU-Boot-Tests
      - name: üß™ Boot-Test (QEMU Headless ‚Äì UEFI)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== QEMU UEFI Boot (Timeout 60s) ==="
          if ! dpkg -L ovmf >/dev/null 2>&1; then
            echo "‚ÑπÔ∏è Installiere fehlende OVMF-Firmware..."
            sudo apt-get update && sudo apt-get install -y ovmf || true
          fi
          OVMF_PATH=$(find /usr/share -type f -name "OVMF_CODE.fd" | head -n1 || true)
          if [ -z "$OVMF_PATH" ]; then
            echo "‚ö†Ô∏è Keine OVMF-Firmware ‚Äì √úberspringe UEFI-Test."
            exit 0
          fi
          echo "‚û°Ô∏è Verwende Firmware: $OVMF_PATH"
          set +e
          timeout 60s qemu-system-x86_64 \
            -cdrom "$ISO" -m 2048 -boot d \
            -no-reboot -nographic -serial mon:stdio \
            -bios "$OVMF_PATH" -display none -snapshot
          RC=$?
          set -e
          if [ "$RC" -eq 124 ]; then
            echo "‚úÖ UEFI-Smoke-Test: Timeout erreicht, Boot OK."
          elif [ "$RC" -eq 0 ]; then
            echo "‚úÖ UEFI-Smoke-Test erfolgreich beendet."
          else
            echo "‚ö†Ô∏è UEFI-Smoke-Test √ºbersprungen oder vorzeitig beendet (RC=$RC)."
          fi

      - name: üß™ Boot-Test (QEMU Headless ‚Äì BIOS/SeaBIOS)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== QEMU BIOS Boot (Timeout 60s) ==="
          timeout 60s qemu-system-x86_64 \
            -cdrom "$ISO" -m 2048 -boot d \
            -no-reboot -nographic -serial mon:stdio -snapshot || true
          echo "‚úÖ BIOS-Smoke-Test abgeschlossen."

      # 12Ô∏è‚É£ Artefakt hochladen
      - name: üì§ Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-9.6-mate-migration-iso
          path: migration-live/rocky-migration-live.iso
