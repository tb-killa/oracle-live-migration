name: Build Oracle Migration Live ISO (LiveBoot)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"   # nightly check build

env:
  ISO_URL: "https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/OracleLinux-R9-U3-live-x86_64.iso"
  ISO_NAME: "OracleLinux-R9-U3-live-x86_64.iso"
  CACHE_KEY: "oraclelinux9u3-live-iso-cache-v1"
  ISO_DIR: ".cache/iso"
  BUILD_DIR: "migration-live"
  FINAL_ISO: "oracle-migration-live.iso"

jobs:
  build-live:
    name: Oracle Live Build (Cache + Overlay + Boot Test)
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      # --------------------------------------------------------------------
      # === Repo checkout ===
      # --------------------------------------------------------------------
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      # --------------------------------------------------------------------
      # === Cache handling ===
      # --------------------------------------------------------------------
      - name: ♻️ Restore ISO cache
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: ${{ env.ISO_DIR }}
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            oraclelinux9u3-live-iso-

      - name: 📦 Download Live ISO (if not cached)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p "${ISO_DIR}"
          echo "📥 Lade Oracle Live ISO..."
          wget -q --show-progress -O "${ISO_DIR}/${ISO_NAME}" "${ISO_URL}"
          ls -lh "${ISO_DIR}/${ISO_NAME}"

      - name: 🔍 Verify ISO cache presence
        run: |
          set -e
          if [ ! -f "${ISO_DIR}/${ISO_NAME}" ]; then
            echo "❌ ISO missing!"
            exit 1
          fi
          echo "✅ ISO cached at ${ISO_DIR}/${ISO_NAME}"
          ls -lh "${ISO_DIR}/"

      # --------------------------------------------------------------------
      # === Install build tools ===
      # --------------------------------------------------------------------
      - name: 🧰 Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y xorriso p7zip-full rsync dos2unix genisoimage squashfs-tools qemu-system-x86 zip unzip

      # --------------------------------------------------------------------
      # === Normalize overlay files ===
      # --------------------------------------------------------------------
      - name: 🔧 Normalize overlay scripts
        run: |
          set -e
          if [ -d overlay ]; then
            find overlay -type f -name "*.sh" -exec dos2unix {} \; || true
            chmod +x overlay/usr/local/bin/*.sh 2>/dev/null || true
          fi

      # --------------------------------------------------------------------
      # === Collect build info ===
      # --------------------------------------------------------------------
      - name: 🧾 Collect environment info
        run: |
          mkdir -p "${BUILD_DIR}/buildinfo"
          {
            echo "Build Time (UTC): $(date -u)"
            uname -a
            echo "--- OS Release ---"
            cat /etc/os-release
          } > "${BUILD_DIR}/buildinfo/system.txt"

      # --------------------------------------------------------------------
      # === Extract ISO ===
      # --------------------------------------------------------------------
      - name: 🏗️ Extract Live ISO
        run: |
          set -euo pipefail
          mkdir -p "${BUILD_DIR}/custom_iso"
          7z x -y -o"${BUILD_DIR}/custom_iso" "${ISO_DIR}/${ISO_NAME}" || true

          echo ">>> Prüfe Bootdateien..."
          for f in isolinux/isolinux.bin isolinux/boot.cat images/efiboot.img LiveOS/squashfs.img; do
            [ -f "${BUILD_DIR}/custom_iso/${f}" ] || { echo "❌ Fehlend: ${f}"; exit 1; }
          done
          echo "✅ Bootdateien OK."

      # --------------------------------------------------------------------
      # === Modify RootFS ===
      # --------------------------------------------------------------------
      - name: 🧩 Modify root filesystem
        run: |
          set -e
          echo ">>> Entpacke LiveOS SquashFS..."
          mkdir -p "${BUILD_DIR}/rootfs"
          unsquashfs -f -d "${BUILD_DIR}/rootfs" "${BUILD_DIR}/custom_iso/LiveOS/squashfs.img"

          echo ">>> Wende Overlay an..."
          rsync -a overlay/ "${BUILD_DIR}/rootfs/" || true

          echo ">>> Setze root Passwort..."
          sudo chroot "${BUILD_DIR}/rootfs" bash -c "echo 'root:oracle' | chpasswd" || true

          echo ">>> Repack LiveOS..."
          rm -f "${BUILD_DIR}/custom_iso/LiveOS/squashfs.img"
          mksquashfs "${BUILD_DIR}/rootfs" "${BUILD_DIR}/custom_iso/LiveOS/squashfs.img" -comp xz -b 1M

      # --------------------------------------------------------------------
      # === Build ISO ===
      # --------------------------------------------------------------------
      - name: 💿 Rebuild bootable ISO (UEFI + BIOS)
        run: |
          set -e
          xorriso -as mkisofs \
            -r -V "Oracle_Migrate_Live" -J -l -iso-level 3 \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            -isohybrid-gpt-basdat \
            -o "${BUILD_DIR}/${FINAL_ISO}" "${BUILD_DIR}/custom_iso"

          ls -lh "${BUILD_DIR}/${FINAL_ISO}"

      # --------------------------------------------------------------------
      # === Boot verification test ===
      # --------------------------------------------------------------------
      - name: 🧪 Boot verification (QEMU)
        run: |
          set -e
          echo ">>> Starte QEMU-Test..."
          timeout 90 qemu-system-x86_64 \
            -m 1024 \
            -cdrom "${BUILD_DIR}/${FINAL_ISO}" \
            -boot d \
            -nographic \
            -serial stdio \
            -no-reboot \
            | tee "${BUILD_DIR}/bootlog.txt" | grep -m1 -E "login:|Oracle Linux|bash" && echo "✅ Boot erfolgreich."

      # --------------------------------------------------------------------
      # === Checksums and artifact upload ===
      # --------------------------------------------------------------------
      - name: 🧮 Create checksum
        run: |
          cd "${BUILD_DIR}"
          sha256sum "${FINAL_ISO}" > "${FINAL_ISO}.sha256"
          cat "${FINAL_ISO}.sha256"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oracle-migration-live
          path: |
            migration-live/${{ env.FINAL_ISO }}
            migration-live/${{ env.FINAL_ISO }}.sha256
            migration-live/bootlog.txt
            migration-live/buildinfo/
