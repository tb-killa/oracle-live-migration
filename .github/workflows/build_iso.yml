name: üß± Build Rocky Migration Live ISO (Phase 4.0 ‚Äì Verified Boot + Tools)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Repository
      - name: üß∞ Checkout Repository
        uses: actions/checkout@v4

      # 2) Basis- & Test-Tools (einmalig, zentral)
      - name: üì¶ Installiere Basis-Tools (Build + Checks)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            genisoimage xorriso p7zip-full wget rsync file syslinux-common \
            mdadm lvm2 qemu-utils qemu-system-x86 ovmf parted dosfstools ntfs-3g

      # 3) ISO aus Cache holen (persistiert zwischen Runs)
      - name: ‚ôªÔ∏è Cache Rocky ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky9-iso-cache-v4

      # 4) Download nur, wenn Cache leer
      - name: üì• Lade Rocky Linux ISO (falls kein Cache)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p .cache/iso
          ISO_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9-latest-x86_64-minimal.iso"
          echo "‚û°Ô∏è Lade Rocky Linux ISO von $ISO_URL ..."
          wget -q --show-progress -O .cache/iso/Rocky-9-latest-x86_64-minimal.iso "$ISO_URL"
          test -s .cache/iso/Rocky-9-latest-x86_64-minimal.iso

      # 5) ISO entpacken & Boot-Label korrigieren
      - name: üß© Entpacke ISO und passe Volume-Label in Boot-Konfigs an
        run: |
          set -euo pipefail
          mkdir -p migration-live/custom_iso
          ISO_PATH=".cache/iso/Rocky-9-latest-x86_64-minimal.iso"
          test -s "$ISO_PATH" || { echo "‚ùå ISO fehlt: $ISO_PATH"; exit 1; }

          echo "=== Lese Original-Volume-Label ==="
          LABEL=$(xorriso -indev "$ISO_PATH" -pvd_info 2>&1 | sed -n 's/^Volume id: *//p' | head -n1 | xargs)
          echo "üîç Original Label: ${LABEL:-<leer>}"
          NEW_LABEL="Rocky-Migration-Live"

          echo "=== Entpacke ISO nach migration-live/custom_iso ==="
          7z x -y -o"migration-live/custom_iso" "$ISO_PATH" >/dev/null

          echo "=== Korrigiere Boot-Konfigurationen ==="
          for cfg in migration-live/custom_iso/isolinux/isolinux.cfg migration-live/custom_iso/EFI/BOOT/grub.cfg; do
            [ -f "$cfg" ] || continue
            [ -n "${LABEL:-}" ] && sed -i "s|$LABEL|$NEW_LABEL|g" "$cfg" || true
            # Vorsorglich typische Rocky-Labels ersetzen
            sed -i "s|Rocky-9-[0-9]\\+-KDE|$NEW_LABEL|g; s|Rocky-9-[0-9]\\+-BaseOS|$NEW_LABEL|g; s|Rocky-9-[0-9]\\+-Minimal|$NEW_LABEL|g" "$cfg" || true
          done
          echo "‚úÖ Label-Fix abgeschlossen."

      # 6) Overlay: root-PW, RAID/LVM-Preload, Helper
      - name: ‚öôÔ∏è Overlay hinzuf√ºgen (root-PW, RAID/LVM, Helper)
        run: |
          set -e
          OVER="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVER"

          # Root-Passwort (Demo)
          cat > "$OVER/set_root.sh" <<'EOF'
          #!/bin/bash
          echo "root:Migration123!" | chpasswd
          EOF
          chmod +x "$OVER/set_root.sh"

          # RAID/LVM-Module vorladen
          cat > "$OVER/load_raid.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Lade RAID/LVM-Module ..."
          for m in dm_mod md_mod raid1 raid10 raid456 linear multipath dm_mirror dm_snapshot dm_thin_pool; do
            modprobe "$m" 2>/dev/null || true
          done
          systemctl enable mdmonitor.service 2>/dev/null || true
          EOF
          chmod +x "$OVER/load_raid.sh"

          # Migration-Helper (Pr√ºft wichtige Binaries zur Laufzeit)
          cat > "$OVER/migration_helper.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Pr√ºfe Migrations-Tools ..."
          for bin in virt-v2v qemu-img mdadm lvm; do
            if command -v "$bin" >/dev/null 2>&1; then
              echo " ‚úî $bin gefunden"
            else
              echo " ‚ö† $bin NICHT gefunden"
            fi
          done
          EOF
          chmod +x "$OVER/migration_helper.sh"

          echo "‚úÖ Overlay-Skripte bereitgestellt (Einbindung als Dateien im ISO)."

      # 7) Locale (Deutsch)
      - name: üß† Setze Sprache & Tastaturlayout (de_DE, de)
        run: |
          set -e
          mkdir -p migration-live/custom_iso/etc
          echo "LANG=de_DE.UTF-8"   | tee migration-live/custom_iso/etc/locale.conf
          echo "KEYMAP=de"          | tee migration-live/custom_iso/etc/vconsole.conf

      # 8) ISO erzeugen (UEFI + BIOS), optional mit isohybrid-MBR
      - name: üß± Erzeuge Hybrid-ISO (UEFI + BIOS)
        run: |
          set -e
          OUT="migration-live/rocky-migration-live.iso"
          VOL="Rocky-Migration-Live"

          # Pflichtdateien aus Minimal-ISO pr√ºfen
          test -f migration-live/custom_iso/isolinux/isolinux.bin || { echo "‚ùå isolinux.bin fehlt"; exit 1; }
          test -f migration-live/custom_iso/isolinux/boot.cat     || { echo "‚ùå boot.cat fehlt"; exit 1; }
          test -f migration-live/custom_iso/images/efiboot.img    || { echo "‚ùå efiboot.img fehlt"; exit 1; }

          # Optionales BIOS-MBR-Template suchen
          MBR_OPT=""
          for p in /usr/lib/ISOLINUX/isohdpfx.bin /usr/lib/syslinux/mbr/isohdpfx.bin; do
            if [ -f "$p" ]; then
              echo "‚úÖ Verwende isohybrid MBR: $p"
              MBR_OPT="-isohybrid-mbr $p"
              break
            fi
          done
          [ -z "$MBR_OPT" ] && echo "‚ö†Ô∏è  isohdpfx.bin nicht gefunden ‚Äì baue ohne -isohybrid-mbr (UEFI ok, BIOS meist dennoch funktionsf√§hig)."

          echo "=== Baue ISO: $OUT  (Label: $VOL) ==="
          xorriso -as mkisofs \
            -V "$VOL" \
            -o "$OUT" \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            $MBR_OPT \
            -J -R -T -v \
            migration-live/custom_iso

          echo "‚úÖ ISO fertig:"
          ls -lh "$OUT"

      # 9) Struktur-Check: ISO mounten & essentielle Dateien pr√ºfen
      - name: üß© Mount & Struktur-Check
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          MNT="./_mnt_iso"
          mkdir -p "$MNT"
          sudo mount -o loop "$ISO" "$MNT"
          echo "=== Essentielle Dateien ==="
          test -f "$MNT/isolinux/isolinux.bin"
          test -f "$MNT/images/efiboot.img"
          ls -l "$MNT/isolinux" | head || true
          sudo umount "$MNT"
          echo "‚úÖ Struktur-Check OK"

      # 10) Inhalts-Check: sind zentrale Tools im Dateibaum sichtbar?
      - name: üß∞ Tool-Check im ISO (sichtbare Binaries)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== Suche wichtige Tools in der ISO-Struktur ==="
          7z l "$ISO" | grep -E "virt-v2v|qemu-img|mdadm|lvm" || echo "‚ö† Tools nicht sichtbar (bei Live-ISOs evtl. erst nachgeladen)"
          echo "‚úÖ Tool-Check abgeschlossen"

      # 11) Headless QEMU-Boot-Smoke-Test (echter Boot bis Timeout)
      - name: üß™ Boot-Test (QEMU Headless, UEFI)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== Starte QEMU-Smoke-Test (Timeout 45s) ==="
          set +e
          timeout 45s qemu-system-x86_64 \
            -cdrom "$ISO" \
            -m 1024 \
            -boot d \
            -no-reboot \
            -nographic \
            -serial mon:stdio \
            -bios /usr/share/OVMF/OVMF_CODE.fd \
            -display none \
            -snapshot
          RC=$?
          set -e
          if [ "$RC" -eq 124 ]; then
            echo "‚úÖ QEMU lief bis Timeout ‚Äì ISO bootet grunds√§tzlich (UEFI)."
          else
            echo "‚ùå QEMU endete vorzeitig (RC=$RC) ‚Äì Boot fehlgeschlagen."
            exit 1
          fi

      # 12) Artefakt bereitstellen
      - name: üì§ Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-migration-live
          path: migration-live/rocky-migration-live.iso
