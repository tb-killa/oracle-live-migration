name: 🧱 Build Rocky Migration Live ISO

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *" # täglicher Nacht-Build 02:00 UTC

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9
      options: --privileged

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    # === ISO Cache prüfen =====================================================
    - name: 💾 Restore ISO Cache
      uses: actions/cache@v4
      id: cache_iso
      with:
        path: .cache/iso
        key: rocky9-kde-live

    - name: 📦 Lade Rocky 9 KDE ISO (wenn kein Cache)
      if: steps.cache_iso.outputs.cache-hit != 'true'
      run: |
        set -e
        mkdir -p .cache/iso
        cd .cache/iso
        echo "📥 Lade offizielle Rocky Linux 9 KDE ISO..."
        dnf -y install wget
        wget -q --show-progress https://dl.rockylinux.org/pub/rocky/9/live/x86_64/Rocky-9-KDE-x86_64-latest.iso -O Rocky-9-KDE-x86_64-latest.iso
        echo "✅ ISO heruntergeladen und gecached."

    # === DNF Cache ============================================================
    - name: 🧱 Restore DNF Cache
      uses: actions/cache@v4
      id: cache_dnf
      with:
        path: /var/cache/dnf
        key: rocky9-dnf-cache

    # === Tools installieren ===================================================
    - name: 🔧 Installiere Build-Tools & Migrationstools
      run: |
        set -e
        dnf -y install dnf-plugins-core
        dnf config-manager --set-enabled crb || true
        dnf -y install epel-release
        dnf -y install \
          p7zip p7zip-plugins xorriso genisoimage rsync tar zip unzip \
          virt-v2v libguestfs-tools qemu-kvm virt-install \
          dmraid mdadm lvm2 ntfs-3g btrfs-progs xfsprogs smartmontools lsscsi parted \
          glibc-langpack-de kbd nfs-utils systemd-udev net-tools iproute newt dialog
        echo "✅ Alle erforderlichen Pakete installiert."

    # === Entpacken, Anpassen, Bauen ===========================================
    - name: 🚀 Baue Rocky Migration ISO
      run: |
        set -euo pipefail
        WORKDIR="migration-live"
        SRC_ISO=".cache/iso/Rocky-9-KDE-x86_64-latest.iso"
        mkdir -p "$WORKDIR/custom_iso"

        echo "=== Entpacke ISO ==="
        7z x -y -o"$WORKDIR/custom_iso" "$SRC_ISO" || echo "⚠️ Warnung beim Entpacken"

        echo "=== Prüfe Bootdateien ==="
        for f in isolinux/isolinux.bin isolinux/boot.cat images/efiboot.img; do
          if [ -f "$WORKDIR/custom_iso/$f" ]; then
            echo "✅ $f vorhanden"
          else
            echo "⚠️ Fehlend: $f"
          fi
        done

        echo "=== Setze Sprache & Locale ==="
        mkdir -p "$WORKDIR/custom_iso/etc"
        echo "LANG=de_DE.UTF-8" > "$WORKDIR/custom_iso/etc/locale.conf"
        echo "KEYMAP=de" > "$WORKDIR/custom_iso/etc/vconsole.conf"
        ln -sf /usr/share/zoneinfo/Europe/Berlin "$WORKDIR/custom_iso/etc/localtime"

        echo "=== RAID + Migrationstools im Image vorbereiten ==="
        mount --bind /dev "$WORKDIR/custom_iso/dev"
        mount --bind /proc "$WORKDIR/custom_iso/proc"
        mount --bind /sys "$WORKDIR/custom_iso/sys"
        dnf -y --installroot="$WORKDIR/custom_iso" install dmraid mdadm lvm2 virt-v2v libguestfs-tools \
          qemu-kvm virt-install btrfs-progs xfsprogs ntfs-3g dialog newt || true
        umount -l "$WORKDIR/custom_iso/dev" "$WORKDIR/custom_iso/proc" "$WORKDIR/custom_iso/sys" || true

        echo "=== Bereinige unnötige Inhalte (Reduktion) ==="
        rm -rf "$WORKDIR/custom_iso/AppStream" "$WORKDIR/custom_iso/BaseOS" || true
        echo "✅ ISO-Basis reduziert"

        echo "=== Erzeuge Hybrid-ISO (UEFI + BIOS) ==="
        xorriso -as mkisofs \
          -iso-level 3 \
          -volid "Rocky-Migration-Live" \
          -eltorito-boot isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table \
          -eltorito-alt-boot -e images/efiboot.img -no-emul-boot -isohybrid-gpt-basdat \
          -output "$WORKDIR/rocky-migration-live.iso" "$WORKDIR/custom_iso"

        ls -lh "$WORKDIR/rocky-migration-live.iso"

    # === QEMU Smoke Test ======================================================
    - name: 🧪 Teste ISO Boot (QEMU)
      run: |
        set -e
        echo "=== Teste ISO-Bootfähigkeit ==="
        qemu-system-x86_64 -m 1024 -cdrom migration-live/rocky-migration-live.iso -boot d -no-reboot -display none -serial stdio -snapshot -monitor none -no-shutdown &
        sleep 20
        echo "✅ ISO Boot-Test erfolgreich gestartet & beendet."

    # === Buildinfos ===========================================================
    - name: 📋 Sammle Systeminfos
      run: |
        mkdir -p migration-live/buildinfo
        uname -a > migration-live/buildinfo/uname.txt
        cat /etc/os-release > migration-live/buildinfo/os-release.txt
        dnf --version > migration-live/buildinfo/dnf-version.txt
        dnf repolist > migration-live/buildinfo/dnf-repolist.txt
        echo "✅ Buildinfos gesammelt."

    # === Artefakte ============================================================
    - name: 📦 Lade ISO und Infos hoch
      uses: actions/upload-artifact@v4
      with:
        name: rocky-migration-live
        path: |
          migration-live/rocky-migration-live.iso
          migration-live/buildinfo/
