name: 🧱 Build Oracle Migration Live ISO

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *"  # Täglich 02:00 UTC

env:
  ISO_URL: "https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/OracleLinux-R9-U3-x86_64-dvd.iso"
  ISO_NAME: "OracleLinux-R9-U3-x86_64-dvd.iso"
  CACHE_KEY: "oraclelinux9u3-iso-v1"
  ISO_DIR: ".cache/iso"
  BUILD_DIR: "migration-live"
  FINAL_ISO: "oracle-migration-live.iso"

jobs:
  build:
    name: 🧰 Full Build Process (Cache, Overlay, ISO, Test, Release)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ✅ Cache wiederherstellen (ISO)
      - name: 💾 Restore ISO Cache
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: ${{ env.ISO_DIR }}
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            oraclelinux9u3-iso-

      # ✅ ISO nur herunterladen, wenn nicht im Cache
      - name: 📦 Download ISO if not cached
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${ISO_DIR}"
          echo "📦 Lade Oracle Linux ISO..."
          wget -q --show-progress -O "${ISO_DIR}/${ISO_NAME}" "${ISO_URL}"
          echo "✅ ISO erfolgreich heruntergeladen:"
          ls -lh "${ISO_DIR}/${ISO_NAME}"

      # ✅ Prüfen, ob ISO existiert
      - name: 🧾 Verify ISO presence
        run: |
          set -e
          if [ ! -f "${ISO_DIR}/${ISO_NAME}" ]; then
            echo "❌ ISO nicht gefunden!"
            ls -R "${ISO_DIR}" || true
            exit 1
          fi
          echo "✅ ISO gefunden:"
          ls -lh "${ISO_DIR}/"

      # ✅ Tools installieren
      - name: 🔧 Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y xorriso p7zip-full rsync dos2unix genisoimage zip unzip qemu-system-x86

      # ✅ Overlay vorbereiten
      - name: ⚙️ Normalize and fix overlay
        run: |
          find overlay -type f -name "*.sh" -exec dos2unix {} \; || true
          chmod +x overlay/usr/local/bin/migration-gui.sh 2>/dev/null || true
          chmod +x build_migration_iso.sh 2>/dev/null || true
          echo "✅ Overlay & Scripts normalisiert."

      # ✅ ISO bauen
      - name: 🧱 Build migration ISO
        run: |
          set -euo pipefail
          mkdir -p "${BUILD_DIR}/custom_iso"
          echo "=== Building Oracle Migration Live ISO ==="
          7z x -y -o"${BUILD_DIR}/custom_iso" "${ISO_DIR}/${ISO_NAME}" || true

          echo ">>> Prüfe Bootdateien..."
          for file in isolinux/isolinux.bin isolinux/boot.cat images/efiboot.img; do
            [ -f "${BUILD_DIR}/custom_iso/${file}" ] || { echo "❌ Fehlende Bootdatei: ${file}"; exit 1; }
          done
          echo "✅ Bootdateien OK."

          echo ">>> Füge Overlay hinzu..."
          rsync -a overlay/ "${BUILD_DIR}/custom_iso/" || true

          echo ">>> Setze root Passwort..."
          sudo bash -c "echo 'root:oracle' | chpasswd" || true

          echo ">>> Bereinige unnötige Inhalte..."
          rm -rf "${BUILD_DIR}/custom_iso"/AppStream || true
          rm -rf "${BUILD_DIR}/custom_iso"/BaseOS/Packages/*.i686.rpm || true

          echo ">>> Erzeuge Hybrid-ISO..."
          xorriso -as mkisofs \
            -r -J -iso-level 3 -V "Oracle_Migration_Live" \
            -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            -isohybrid-gpt-basdat -no-pad -x-size-limit off \
            -o "${BUILD_DIR}/${FINAL_ISO}" "${BUILD_DIR}/custom_iso"

          echo "✅ ISO erfolgreich erzeugt:"
          ls -lh "${BUILD_DIR}/${FINAL_ISO}"

      # ✅ Test (Bootfähigkeit)
      - name: 🧪 Boot test via QEMU (headless)
        run: |
          echo ">>> Starte Headless Boot-Test..."
          qemu-system-x86_64 -m 1024 -cdrom "${BUILD_DIR}/${FINAL_ISO}" -boot d \
            -display none -no-reboot -serial stdio -snapshot -nographic \
            -monitor none -vga none -usbdevice tablet -net none &
          sleep 25
          pkill qemu || true
          echo "✅ Boot-Test erfolgreich beendet."

      # ✅ Build-Infos erzeugen
      - name: 🧾 Create build info
        run: |
          mkdir -p migration-live/buildinfo
          echo "Build Timestamp: $(date -u)" > migration-live/buildinfo/CHANGELOG.txt
          echo "--- System Info ---" >> migration-live/buildinfo/CHANGELOG.txt
          uname -a >> migration-live/buildinfo/CHANGELOG.txt
          echo "--- Installed packages ---" >> migration-live/buildinfo/CHANGELOG.txt
          dpkg -l | head -n 40 >> migration-live/buildinfo/CHANGELOG.txt
          echo "✅ CHANGELOG erstellt."

      # ✅ Artefakte hochladen
      - uses: actions/upload-artifact@v4
        with:
          name: oracle-migration-live
          path: |
            migration-live/${{ env.FINAL_ISO }}
            migration-live/buildinfo/CHANGELOG.txt

      # ✅ GitHub Release
      - name: 🚀 Release ISO
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.run_number }}"
          name: "Oracle Migration Live #${{ github.run_number }}"
          body_path: migration-live/buildinfo/CHANGELOG.txt
          files: |
            migration-live/${{ env.FINAL_ISO }}
