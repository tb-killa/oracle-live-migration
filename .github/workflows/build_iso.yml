name: 🧱 Build Rocky Migration Live ISO (Phase 3 – Auto-Fix + RAID + Locale)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🧰 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Installiere Basis-Tools
        run: |
          set -e
          sudo apt-get update
          # isoinfo kommt über genisoimage
          sudo apt-get install -y \
            genisoimage xorriso p7zip-full wget rsync file syslinux-common

      - name: ♻️ Cache Rocky ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky9-iso-cache-v3

      - name: 📥 Lade Rocky Linux ISO (falls kein Cache)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p .cache/iso
          ISO_URL="https://download.rockylinux.org/pub/rocky/9/isos/x86_64/Rocky-9-latest-x86_64-minimal.iso"
          echo "➡️ Lade Rocky Linux ISO von $ISO_URL ..."
          wget -q --show-progress -O .cache/iso/Rocky-9-latest-x86_64-minimal.iso "$ISO_URL"

      - name: 🧩 Entpacke ISO und prüfe Volume-Label (mit Fallback)
        run: |
          set -euo pipefail
          mkdir -p migration-live/custom_iso overlay

          ISO_PATH=".cache/iso/Rocky-9-latest-x86_64-minimal.iso"
          test -s "$ISO_PATH" || { echo "❌ ISO fehlt: $ISO_PATH"; exit 1; }

          echo "=== Lese Volume-Label aus Original-ISO ==="
          if command -v isoinfo >/dev/null 2>&1; then
            LABEL=$(isoinfo -d -i "$ISO_PATH" | awk -F': ' '/Volume id/ {print $2}' | xargs)
          else
            LABEL=$(xorriso -indev "$ISO_PATH" -pvd_info 2>&1 | sed -n 's/^Volume id: *//p' | head -n1 | xargs)
          fi
          echo "🔍 Original Label: ${LABEL:-<leer>}"

          NEW_LABEL="Rocky-Migration-Live"
          echo "📦 Neues Label: $NEW_LABEL"

          echo "=== Entpacke ISO ==="
          7z x -y -o"migration-live/custom_iso" "$ISO_PATH" >/dev/null

          echo "=== Prüfe und korrigiere Boot-Konfigs ==="
          for cfg in \
            migration-live/custom_iso/isolinux/isolinux.cfg \
            migration-live/custom_iso/EFI/BOOT/grub.cfg; do
            if [ -f "$cfg" ]; then
              if [ -n "${LABEL:-}" ]; then
                sed -i "s|$LABEL|$NEW_LABEL|g" "$cfg"
              fi
              # gängige Rocky-Labels vorsorglich ersetzen
              sed -i "s|Rocky-9-[0-9]\\+-KDE|$NEW_LABEL|g; s|Rocky-9-[0-9]\\+-BaseOS|$NEW_LABEL|g; s|Rocky-9-[0-9]\\+-Minimal|$NEW_LABEL|g" "$cfg" || true
            fi
          done
          echo "=== ISO-Label in Boot-Konfigs gefixt (falls vorhanden) ==="

      - name: ⚙️ Füge Overlay-Inhalte hinzu (root-PW, RAID-Preload, Helper)
        run: |
          set -e
          OVERLAY="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVERLAY"

          # Root-Passwort (Demo)
          cat > "$OVERLAY/set_root.sh" <<'EOF'
          #!/bin/bash
          echo "root:Migration123!" | chpasswd
          EOF
          chmod +x "$OVERLAY/set_root.sh"

          # RAID-&-LVM-Autoload
          cat > "$OVERLAY/load_raid.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Lade RAID- und LVM-Module..."
          for m in dm_mod md_mod raid1 raid10 raid456 linear multipath dm_mirror dm_snapshot dm_thin_pool; do
            modprobe "$m" 2>/dev/null || true
          done
          systemctl enable mdmonitor.service 2>/dev/null || true
          EOF
          chmod +x "$OVERLAY/load_raid.sh"

          # Migration-Helper (Stub)
          cat > "$OVERLAY/migration_helper.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Starte Migrations-Umgebung..."
          command -v virt-v2v >/dev/null 2>&1 && virt-v2v --version || echo "virt-v2v nicht gefunden."
          EOF
          chmod +x "$OVERLAY/migration_helper.sh"

          echo "✅ Overlay-Skripte hinzugefügt."

      - name: 🧠 Setze Sprache & Locale
        run: |
          set -e
          mkdir -p migration-live/custom_iso/etc
          echo "LANG=de_DE.UTF-8" | tee migration-live/custom_iso/etc/locale.conf
          echo "KEYMAP=de" | tee migration-live/custom_iso/etc/vconsole.conf

      - name: 🛠️ (Runner) Zusatztools für Checks installieren
        run: |
          sudo apt-get install -y mdadm lvm2 qemu-utils parted dosfstools ntfs-3g

      - name: 🧱 Erzeuge Hybrid-ISO (UEFI + BIOS)
        run: |
          set -e
          OUT_ISO="migration-live/rocky-migration-live.iso"
          VOLID="Rocky-Migration-Live"

          # Prüfe notwendige Boot-Dateien
          test -f migration-live/custom_iso/isolinux/isolinux.bin || { echo "❌ isolinux.bin fehlt!"; exit 1; }
          test -f migration-live/custom_iso/isolinux/boot.cat     || { echo "❌ boot.cat fehlt!";     exit 1; }
          test -f migration-live/custom_iso/images/efiboot.img    || { echo "❌ efiboot.img fehlt!";  exit 1; }

          # Finde isohybrid-MBR (aus syslinux-common). Wenn vorhanden, nutzen; sonst ohne bauen.
          MBR_CANDIDATES="/usr/lib/ISOLINUX/isohdpfx.bin /usr/lib/syslinux/mbr/isohdpfx.bin"
          MBR_OPT=""
          for p in $MBR_CANDIDATES; do
            if [ -f "$p" ]; then
              echo "✅ Gefundenes isohybrid MBR: $p"
              MBR_OPT="-isohybrid-mbr $p"
              break
            fi
          done
          if [ -z "$MBR_OPT" ]; then
            echo "⚠️  Kein isohdpfx.bin gefunden – baue ohne -isohybrid-mbr (UEFI ok, BIOS i.d.R. trotzdem funktionsfähig)."
          fi

          echo "=== Erzeuge ISO mit Label: $VOLID ==="
          xorriso -as mkisofs \
            -V "$VOLID" \
            -o "$OUT_ISO" \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            $MBR_OPT \
            -J -R -T -v \
            migration-live/custom_iso

          echo "✅ ISO erfolgreich erzeugt:"
          ls -lh "$OUT_ISO"

      - name: 🔍 Integritätstest
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          file "$ISO"
          if command -v isoinfo >/dev/null 2>&1; then
            isoinfo -d -i "$ISO" | grep -E "Volume id|Application id" || true
          else
            xorriso -indev "$ISO" -pvd_info 2>&1 | sed -n 's/^Volume id:/Volume id/p' || true
          fi
          echo "=== Suche Stage2/LABEL in isolinux.cfg ==="
          isoinfo -i "$ISO" -x /isolinux/isolinux.cfg 2>/dev/null | grep -E "inst.stage2|LABEL=" || true

      - name: 📤 Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-migration-live
          path: migration-live/rocky-migration-live.iso
