name: üß± Build Rocky MATE Live Migration ISO (Phase 4.1 ‚Äì Live + Verified Boot)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo holen
      - name: üß∞ Checkout Repository
        uses: actions/checkout@v4

      # 2) Build-/Test-Tools
      - name: üì¶ Installiere Build- & Test-Tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            genisoimage xorriso p7zip-full wget rsync file syslinux-common \
            mdadm lvm2 qemu-utils qemu-system-x86 ovmf parted dosfstools ntfs-3g

      # 3) ISO aus Cache (persistiert zwischen Runs)
      - name: ‚ôªÔ∏è Cache Rocky MATE Live ISO
        id: cache-iso
        uses: actions/cache@v4
        with:
          path: .cache/iso
          key: rocky9.6-mate-live-cache-v1

      # 4) Download nur, wenn kein Cache
      - name: üì• Lade Rocky MATE Live ISO (falls kein Cache)
        if: steps.cache-iso.outputs.cache-hit != 'true'
        run: |
          set -e
          mkdir -p .cache/iso
          ISO_URL="https://dl.rockylinux.org/vault/rocky/9.6/live/x86_64/Rocky-9-MATE-x86_64-latest.iso"
          echo "‚û°Ô∏è Lade Rocky MATE Live ISO von $ISO_URL ..."
          wget -q --show-progress -O .cache/iso/Rocky-9-latest-x86_64-mate.iso "$ISO_URL"
          test -s .cache/iso/Rocky-9-latest-x86_64-mate.iso

      # 5) Entpacken & Label-Fix (f√ºr konsistente Anzeige)
      - name: üß© Entpacke ISO & passe Boot-Label
        run: |
          set -euo pipefail
          mkdir -p migration-live/custom_iso
          ISO_PATH=".cache/iso/Rocky-9-latest-x86_64-mate.iso"
          test -s "$ISO_PATH" || { echo "‚ùå ISO fehlt: $ISO_PATH"; exit 1; }

          echo "=== Lese Volume-Label ==="
          LABEL=$(xorriso -indev "$ISO_PATH" -pvd_info 2>&1 | sed -n 's/^Volume id: *//p' | head -n1 | xargs)
          echo "üîç Original Label: ${LABEL:-<leer>}"
          NEW_LABEL="Rocky-Migration-Live"

          echo "=== Entpacke ISO ==="
          7z x -y -o"migration-live/custom_iso" "$ISO_PATH" >/dev/null

          echo "=== Label in Boot-Konfigs korrigieren ==="
          for cfg in migration-live/custom_iso/isolinux/isolinux.cfg migration-live/custom_iso/EFI/BOOT/grub.cfg; do
            [ -f "$cfg" ] || continue
            [ -n "${LABEL:-}" ] && sed -i "s|$LABEL|$NEW_LABEL|g" "$cfg" || true
            sed -i "s|Rocky-9-[0-9]\\+-.*|$NEW_LABEL|g" "$cfg" || true
          done
          echo "‚úÖ Label-Fix abgeschlossen."

      # 6) Overlay: root-PW, RAID/LVM-Preload, Helper (als Dateien im ISO)
      - name: ‚öôÔ∏è Overlay (root-PW, RAID/LVM, Helper)
        run: |
          set -e
          OVER="migration-live/custom_iso/root_overlay"
          mkdir -p "$OVER"

          cat > "$OVER/set_root.sh" <<'EOF'
          #!/bin/bash
          echo "root:Migration123!" | chpasswd
          EOF
          chmod +x "$OVER/set_root.sh"

          cat > "$OVER/load_raid.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Lade RAID/LVM-Module ..."
          for m in dm_mod md_mod raid1 raid10 raid456 linear multipath dm_mirror dm_snapshot dm_thin_pool; do
            modprobe "$m" 2>/dev/null || true
          done
          systemctl enable mdmonitor.service 2>/dev/null || true
          EOF
          chmod +x "$OVER/load_raid.sh"

          cat > "$OVER/migration_helper.sh" <<'EOF'
          #!/bin/bash
          echo "[INFO] Pr√ºfe Migrations-Tools ..."
          for bin in virt-v2v qemu-img mdadm lvm; do
            if command -v "$bin" >/dev/null 2>&1; then
              echo " ‚úî $bin gefunden"
            else
              echo " ‚ö† $bin NICHT gefunden"
            fi
          done
          echo "Hinweis: virt-v2v ist nicht immer im Live-ISO vorinstalliert. F√ºr produktiven Einsatz per dnf nachinstallieren."
          EOF
          chmod +x "$OVER/migration_helper.sh"

          echo "‚úÖ Overlay-Skripte in ISO abgelegt (manuell aus Live-System nutzbar)."

      # 7) Locale/Keyboard (DE)
      - name: üß† Setze DE-Locale & Keyboard
        run: |
          set -e
          mkdir -p migration-live/custom_iso/etc
          echo "LANG=de_DE.UTF-8"   | tee migration-live/custom_iso/etc/locale.conf
          echo "KEYMAP=de"          | tee migration-live/custom_iso/etc/vconsole.conf

      # 8) Sanity-Checks Live-spezifischer Dateien (squashfs etc.)
      - name: üîé Pr√ºfe Live-Assets (SquashFS, Efiboot, Isolinux)
        run: |
          set -e
          test -f migration-live/custom_iso/isolinux/isolinux.bin || { echo "‚ùå isolinux.bin fehlt"; exit 1; }
          test -f migration-live/custom_iso/isolinux/boot.cat     || { echo "‚ùå boot.cat fehlt"; exit 1; }
          test -f migration-live/custom_iso/images/efiboot.img    || { echo "‚ùå efiboot.img fehlt"; exit 1; }
          # LiveOS liegt bei Rocky Live unter /LiveOS (SquashFS + Overlay)
          if [ -d migration-live/custom_iso/LiveOS ]; then
            echo "‚úÖ LiveOS Verzeichnis gefunden:"
            ls -lh migration-live/custom_iso/LiveOS || true
          else
            echo "‚ö†Ô∏è LiveOS Verzeichnis nicht gefunden ‚Äì bitte Live-ISO pr√ºfen."
          fi

      # 9) ISO bauen (UEFI + BIOS)
      - name: üß± Erzeuge Hybrid-ISO (UEFI + BIOS)
        run: |
          set -e
          OUT="migration-live/rocky-migration-live.iso"
          VOL="Rocky-Migration-Live"

          # BIOS-Hybrid-MBR falls vorhanden
          MBR_OPT=""
          for p in /usr/lib/ISOLINUX/isohdpfx.bin /usr/lib/syslinux/mbr/isohdpfx.bin; do
            if [ -f "$p" ]; then
              echo "‚úÖ Verwende isohybrid MBR: $p"
              MBR_OPT="-isohybrid-mbr $p"
              break
            fi
          done
          [ -z "$MBR_OPT" ] && echo "‚ö†Ô∏è  Kein isohdpfx.bin gefunden ‚Äì UEFI sicher, BIOS meist ok."

          echo "=== Baue ISO: $OUT (Label: $VOL) ==="
          xorriso -as mkisofs \
            -V "$VOL" \
            -o "$OUT" \
            -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot \
            $MBR_OPT \
            -J -R -T -v \
            migration-live/custom_iso

          echo "‚úÖ ISO fertig:"
          ls -lh "$OUT"

      # 10) Struktur-Check via Mount
      - name: üß© Mount & Struktur-Check
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          MNT="./_mnt_iso"
          mkdir -p "$MNT"
          sudo mount -o loop "$ISO" "$MNT"
          echo "=== Essentielle Dateien im ISO ==="
          test -f "$MNT/isolinux/isolinux.bin"
          test -f "$MNT/images/efiboot.img"
          if [ -d "$MNT/LiveOS" ]; then
            echo "LiveOS-Inhalte:"
            ls -lh "$MNT/LiveOS" || true
          fi
          sudo umount "$MNT"
          echo "‚úÖ Struktur-Check OK"

      # 11) Tool-Check (sichtbar im ISO-Dateibaum)
      - name: üß∞ Tool-Check im ISO (sichtbare Binaries)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== Suche wichtige Tools in der ISO-Struktur ==="
          7z l "$ISO" | grep -E "virt-v2v|qemu-img|mdadm|lvm" || echo "‚ö† Tools nicht sichtbar (Live-ISOs laden oft zur Laufzeit nach)"
          echo "‚úÖ Tool-Check abgeschlossen"

      # 12) QEMU Boot-Smoke-Tests: UEFI und BIOS
      - name: üß™ Boot-Test (QEMU Headless ‚Äì UEFI)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== QEMU UEI Boot (Timeout 60s) ==="
          set +e
          timeout 60s qemu-system-x86_64 \
            -cdrom "$ISO" \
            -m 2048 -smp 2 \
            -boot d \
            -no-reboot \
            -nographic \
            -serial mon:stdio \
            -bios /usr/share/OVMF/OVMF_CODE.fd \
            -display none \
            -snapshot
          RC=$?
          set -e
          if [ "$RC" -eq 124 ]; then
            echo "‚úÖ UEFI-Smoke-Test: VM lief bis Timeout ‚Äì Boot grunds√§tzlich ok."
          else
            echo "‚ùå UEFI-Smoke-Test: vorzeitig beendet (RC=$RC)."
            exit 1
          fi

      - name: üß™ Boot-Test (QEMU Headless ‚Äì BIOS/SeaBIOS)
        run: |
          set -e
          ISO="migration-live/rocky-migration-live.iso"
          echo "=== QEMU BIOS Boot (Timeout 60s) ==="
          set +e
          timeout 60s qemu-system-x86_64 \
            -cdrom "$ISO" \
            -m 2048 -smp 2 \
            -boot d \
            -no-reboot \
            -nographic \
            -serial mon:stdio \
            -display none \
            -snapshot
          RC=$?
          set -e
          if [ "$RC" -eq 124 ]; then
            echo "‚úÖ BIOS-Smoke-Test: VM lief bis Timeout ‚Äì Boot grunds√§tzlich ok."
          else
            echo "‚ùå BIOS-Smoke-Test: vorzeitig beendet (RC=$RC)."
            exit 1
          fi

      # 13) Artefakt bereitstellen
      - name: üì§ Lade ISO-Artifact hoch
        uses: actions/upload-artifact@v4
        with:
          name: rocky-mate-live-migration
          path: migration-live/rocky-migration-live.iso
