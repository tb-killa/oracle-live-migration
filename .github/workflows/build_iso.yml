name: Build Oracle Migration Live ISO

on:
  workflow_dispatch:
  schedule:
    # üîÅ einmal t√§glich um 03:00 UTC automatisch pr√ºfen & bauen
    - cron: "0 3 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: oraclelinux:9

    env:
      ISO_DIR: migration-live
      ISO_BASE_URL: https://yum.oracle.com/ISOS/OracleLinux/OL9
      ISO_FILE: OracleLinux-R9-U3-x86_64-dvd.iso
      BUILD_SCRIPT: build_migration_iso.sh

    steps:
    # ------------------------------------------------------------
    # üß© Repository
    # ------------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # ------------------------------------------------------------
    # üß† Oracle Version dynamisch ermitteln (z. B. U3, U4 etc.)
    # ------------------------------------------------------------
    - name: Detect latest Oracle Linux 9 minor version
      id: detect-version
      run: |
        echo "üì¶ Pr√ºfe aktuelle Oracle Linux 9 Version..."
        VERSION=$(curl -sL https://yum.oracle.com/ISOS/OracleLinux/OL9/ | \
          grep -oE 'u[0-9]+' | sort -V | tail -n1)
        echo "Detected version: $VERSION"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

    # ------------------------------------------------------------
    # üß© ISO-CACHE abrufen
    # ------------------------------------------------------------
    - name: Restore Oracle Linux ISO cache
      id: cache-iso
      uses: actions/cache@v4
      with:
        path: ${{ env.ISO_DIR }}/OracleLinux-R9-${{ steps.detect-version.outputs.version }}-x86_64-dvd.iso
        key: oraclelinux9-${{ steps.detect-version.outputs.version }}-dvd-cache

    # ------------------------------------------------------------
    # üß± ISO nur herunterladen, wenn nicht im Cache
    # ------------------------------------------------------------
    - name: Download Oracle Linux ISO if missing
      if: steps.cache-iso.outputs.cache-hit != 'true'
      run: |
        mkdir -p $ISO_DIR
        ISO_NAME="OracleLinux-R9-${{ steps.detect-version.outputs.version }}-x86_64-dvd.iso"
        ISO_URL="$ISO_BASE_URL/${{ steps.detect-version.outputs.version }}/x86_64/$ISO_NAME"
        echo "üì¶ Lade Oracle Linux ISO von $ISO_URL"
        dnf -y install wget
        wget --progress=dot:giga -O "$ISO_DIR/$ISO_NAME" "$ISO_URL"

    # ------------------------------------------------------------
    # üíæ DNF-CACHE f√ºr Pakete (optional, spart Zeit)
    # ------------------------------------------------------------
    - name: Restore DNF cache
      id: cache-dnf
      uses: actions/cache@v4
      with:
        path: /var/cache/dnf
        key: dnf-cache-${{ runner.os }}-${{ hashFiles('**/build_migration_iso.sh') }}

    # ------------------------------------------------------------
    # üß∞ Tools installieren
    # ------------------------------------------------------------
    - name: Install build dependencies
      run: |
        dnf -y install oracle-epel-release-el9
        dnf -y install p7zip p7zip-plugins rsync wget xorriso zip unzip tar diffutils coreutils util-linux

    # ------------------------------------------------------------
    # üß© Preflight-Check
    # ------------------------------------------------------------
    - name: Preflight checks
      run: |
        echo "=== Repository Struktur pr√ºfen ==="
        test -f "$BUILD_SCRIPT" || (echo "‚ùå Fehlendes Build-Script!" && exit 1)
        test -d overlay || (echo "‚ùå Overlay-Ordner fehlt!" && exit 1)
        chmod +x "$BUILD_SCRIPT"
        echo "‚úÖ Struktur ok ‚Äì Build kann starten."

    # ------------------------------------------------------------
    # üöÄ ISO-Build starten
    # ------------------------------------------------------------
    - name: Build Oracle Migration ISO
      run: |
        echo "üöÄ Starte ISO-Build..."
        mkdir -p $ISO_DIR
        ISO_PATH="$ISO_DIR/OracleLinux-R9-${{ steps.detect-version.outputs.version }}-x86_64-dvd.iso"
        export ISO_PATH
        ./$BUILD_SCRIPT

    # ------------------------------------------------------------
    # üì¶ ISO und Log hochladen
    # ------------------------------------------------------------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: oracle-migration-live-${{ steps.detect-version.outputs.version }}
        path: |
          migration-live/oracle-migration-live.iso
          migration-live/build.log
