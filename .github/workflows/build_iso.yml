name: Build, Test & Release Oracle Migration Live ISO (System Diff + Metadata + JSON)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

env:
  ISO_NAME: OracleLinux-R9-U3-x86_64-dvd.iso
  ISO_DIR: ${{ github.workspace }}/migration-live
  CACHE_KEY_ISO: oraclelinux9u3-iso-cache
  RELEASE_TAG_PREFIX: nightly-

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: üß≠ Checkout Repository
        uses: actions/checkout@v4

      - name: üóÉÔ∏è Lade ISO Cache
        id: cache_iso
        uses: actions/cache@v4
        with:
          path: ${{ env.ISO_DIR }}/${{ env.ISO_NAME }}
          key: ${{ env.CACHE_KEY_ISO }}

      - name: üì¶ Lade Oracle ISO falls nicht im Cache
        run: |
          mkdir -p "${ISO_DIR}"
          if [ ! -f "${ISO_DIR}/${ISO_NAME}" ]; then
            echo "‚û°Ô∏è Lade ISO von Oracle..."
            wget -q --show-progress -O "${ISO_DIR}/${ISO_NAME}" \
              "https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/${ISO_NAME}"
          else
            echo "‚úÖ ISO bereits im Cache vorhanden."
          fi

      - name: üì§ Lade ISO als Artefakt
        uses: actions/upload-artifact@v4
        with:
          name: cached-oracle-iso
          path: ${{ env.ISO_DIR }}/${{ env.ISO_NAME }}

  build:
    needs: prepare
    runs-on: ubuntu-latest
    container:
      image: oraclelinux:9
    steps:
      - name: üîΩ Lade Artefakte
        uses: actions/download-artifact@v4
        with:
          name: cached-oracle-iso
          path: ${{ github.workspace }}/cached-oracle-iso

      - name: ‚öôÔ∏è Installiere Build-Abh√§ngigkeiten
        run: |
          dnf -y install oracle-epel-release-el9
          dnf -y install git wget rsync xorriso zip unzip p7zip p7zip-plugins jq diffutils coreutils util-linux tar

      - name: üßæ Erfasse System-Metadaten
        run: |
          set -euo pipefail
          META_DIR="${{ github.workspace }}/migration-live/buildinfo"
          mkdir -p "$META_DIR"
          cat /etc/os-release > "$META_DIR/os-release.txt"
          uname -a > "$META_DIR/uname.txt"
          dnf --version > "$META_DIR/dnf-version.txt"
          dnf repolist -v > "$META_DIR/dnf-repolist.txt"

          # üîß Verschiebe ISO an den erwarteten Ort
          mkdir -p "${{ github.workspace }}/migration-live"
          mv "${{ github.workspace }}/cached-oracle-iso/${{ env.ISO_NAME }}" "${{ github.workspace }}/migration-live/${{ env.ISO_NAME }}"

          # Pr√ºfen
          ls -lh "${{ github.workspace }}/migration-live/${{ env.ISO_NAME }}"

          rpm -qa --qf '%{NAME} %{VERSION}-%{RELEASE} %{ARCH}\n' | sort > "$META_DIR/rpm-list.txt"
          sha256sum "${{ github.workspace }}/migration-live/${{ env.ISO_NAME }}" > "$META_DIR/iso-sha256.txt"

      - name: üöÄ Starte ISO-Build
        run: |
          set -euo pipefail
          cd "${{ github.workspace }}/migration-live"
          mkdir -p custom_iso
          xorriso -osirrox on -indev "${ISO_NAME}" -extract / custom_iso
          rsync -a "${{ github.workspace }}/overlay/" custom_iso/
          xorriso -as mkisofs -r -V "ORACLE-MIGRATION" \
            -o oracle-migration-live.iso \
            -J -joliet-long -b isolinux/isolinux.bin -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot -e images/efiboot.img -no-emul-boot custom_iso
          sha256sum oracle-migration-live.iso > "$META_DIR/built-iso-sha256.txt"

      - name: üì§ Artefakte hochladen
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            ${{ github.workspace }}/migration-live/oracle-migration-live.iso
            ${{ github.workspace }}/migration-live/buildinfo/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: üîΩ Lade ISO-Artefakt
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: iso_test

      - name: ‚öôÔ∏è Installiere QEMU
        run: sudo apt-get update && sudo apt-get install -y qemu-system-x86

      - name: üß™ Teste ISO-Boot (45s)
        run: |
          ISO="iso_test/oracle-migration-live.iso"
          echo "üöÄ Starte QEMU Testboot..."
          qemu-system-x86_64 -m 1024 -cdrom "$ISO" -boot d -nographic -no-reboot -serial stdio -monitor none -snapshot &
          pid=$!
          sleep 45
          if ps -p $pid > /dev/null; then
            echo "‚úÖ ISO bootf√§hig erkannt."
            kill $pid
          else
            echo "‚ùå Boot fehlgeschlagen!"
            exit 1
          fi

  release:
    needs: test
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: üîΩ Lade Build-Artefakte
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: release_payload

      - name: üßÆ Analysiere Paket√§nderungen (Markdown & JSON)
        id: rpm_diff
        run: |
          mkdir -p release_payload/diff
          echo "üîç Pr√ºfe vorheriges Release..."
          LATEST=$(gh release list --limit 1 --json tagName -q '.[0].tagName' || true)
          echo "Letztes Release: $LATEST"

          NEW_FILE="release_payload/buildinfo/rpm-list.txt"
          if [ -n "$LATEST" ]; then
            gh release download "$LATEST" -p "buildinfo/rpm-list.txt" -D prev_release || true
          fi
          OLD_FILE="prev_release/buildinfo/rpm-list.txt"

          if [ -f "$OLD_FILE" ]; then
            diff -u "$OLD_FILE" "$NEW_FILE" > release_payload/diff/rpm-diff.txt || true

            # Markdown
            awk '
              /^+/ && !/^\+\+/ {sub(/^\+/, "", $0); add[$1]=$0}
              /^-/ && !/^--/   {sub(/^-/, "", $0); rem[$1]=$0}
              END {
                print "üü¢ **Neu hinzugef√ºgt:**"
                for (i in add) if (!(i in rem)) print "  + " add[i]
                print "\nüî¥ **Entfernt:**"
                for (i in rem) if (!(i in add)) print "  - " rem[i]
                print "\nüîµ **Aktualisiert:**"
                for (i in add) if (i in rem && add[i] != rem[i]) print "  ~ " add[i] " ‚Üê " rem[i]
              }
            ' "$OLD_FILE" "$NEW_FILE" > release_payload/diff/rpm-diff-summary.md

            # JSON
            jq -n --arg new "$(sha256sum $NEW_FILE | awk '{print $1}')" \
                  --arg old "$(sha256sum $OLD_FILE | awk '{print $1}')" \
                  --argfile diff <(diff -u "$OLD_FILE" "$NEW_FILE" | jq -R -s 'split("\n")') \
                  '{old_sha:$old,new_sha:$new,diff:$diff}' > release_payload/diff/rpm-diff.json
          else
            echo "_Initialer Build ‚Äì kein Vergleich verf√ºgbar._" > release_payload/diff/rpm-diff-summary.md
            jq -n '{"note":"Initialer Build, kein Vergleich verf√ºgbar"}' > release_payload/diff/rpm-diff.json
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Erstelle Release mit System-Infos & Paket-Diff
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG_PREFIX }}${{ github.run_number }}
          name: "Oracle Migration ISO ‚Äì Build #${{ github.run_number }}"
          body: |
            ‚úÖ Build erfolgreich getestet & freigegeben

            ### üß© Systeminformationen
            - OS: $(head -n 1 release_payload/buildinfo/os-release.txt)
            - Kernel: $(head -n 1 release_payload/buildinfo/uname.txt)
            - DNF-Version: $(head -n 1 release_payload/buildinfo/dnf-version.txt)
            - ISO SHA256: $(awk '{print $1}' release_payload/buildinfo/built-iso-sha256.txt)

            ### üì¶ Paket√§nderungen (vollst√§ndige √úbersicht)
            $(cat release_payload/diff/rpm-diff-summary.md)

            ---
            _Vollst√§ndige Listen, JSON-Diff & ISO befinden sich in den Release-Assets._
          files: |
            release_payload/oracle-migration-live.iso
            release_payload/buildinfo/**
            release_payload/diff/rpm-diff.txt
            release_payload/diff/rpm-diff-summary.md
            release_payload/diff/rpm-diff.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
