name: Oracle Migration Live ISO (Stable Build + Cache + Release)

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  ISO_URL: https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/OracleLinux-R9-U3-x86_64-dvd.iso
  ISO_NAME: OracleLinux-R9-U3-x86_64-dvd.iso
  ISO_PATH: migration-live/iso
  CACHE_KEY: oraclelinux9u3-iso-cache

jobs:
  prepare:
    name: 📦 Prepare ISO (Cache + Artifact)
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout Repository
        uses: actions/checkout@v4

      - name: 💾 Lade ISO Cache
        id: iso_cache
        uses: actions/cache@v4
        with:
          path: ${{ env.ISO_PATH }}/${{ env.ISO_NAME }}
          key: ${{ env.CACHE_KEY }}

      - name: ⬇️ Lade Oracle ISO (wenn nicht im Cache)
        run: |
          set -e
          mkdir -p "${ISO_PATH}"
          if [ ! -f "${ISO_PATH}/${ISO_NAME}" ]; then
            echo ">>> Lade ISO neu herunter..."
            wget -q --show-progress -O "${ISO_PATH}/${ISO_NAME}" "${ISO_URL}"
          else
            echo "✅ ISO bereits im Cache vorhanden."
          fi
          ls -lh "${ISO_PATH}/${ISO_NAME}"

      - name: 🧮 Prüfe ISO-Datei
        run: |
          if [ ! -f "${ISO_PATH}/${ISO_NAME}" ]; then
            echo "❌ ISO-Download fehlgeschlagen!"
            exit 1
          fi
          echo "✅ ISO-Datei vorhanden: ${ISO_PATH}/${ISO_NAME}"
          sha256sum "${ISO_PATH}/${ISO_NAME}" > "${ISO_PATH}/${ISO_NAME}.sha256"

      - name: 📤 Lade ISO als Artifact hoch (Fallback)
        uses: actions/upload-artifact@v4
        with:
          name: oracle-iso
          path: |
            ${{ env.ISO_PATH }}/${{ env.ISO_NAME }}
            ${{ env.ISO_PATH }}/${{ env.ISO_NAME }}.sha256

  build:
    name: 🧩 Build Migration ISO
    runs-on: ubuntu-latest
    needs: prepare
    container:
      image: oraclelinux:9
    steps:
      - name: 🧾 Repository Struktur prüfen
        uses: actions/checkout@v4

      - name: 🧮 Lade ISO aus Cache / Artifact
        run: |
          set -euo pipefail
          mkdir -p /mnt/iso
          echo ">>> Suche ISO-Datei..."
          BASE_PATH="/home/runner/work/oracle-live-migration/oracle-live-migration"
          CACHE_PATH="${BASE_PATH}/${ISO_PATH}/${ISO_NAME}"
          if [ -f "$CACHE_PATH" ]; then
            echo "✅ ISO im Cache gefunden."
            cp "$CACHE_PATH" /mnt/iso/
          elif [ -f "/__w/oracle-live-migration/oracle-live-migration/${ISO_PATH}/${ISO_NAME}" ]; then
            echo "✅ ISO im Container-Cache gefunden."
            cp "/__w/oracle-live-migration/oracle-live-migration/${ISO_PATH}/${ISO_NAME}" /mnt/iso/
          else
            echo "⚠️ Kein Cache gefunden – versuche Artifact..."
            mkdir -p /mnt/iso
            curl -L -o /tmp/oracle-iso.zip "$ACTIONS_RUNTIME_URL/_apis/pipelines/workflows/${{ github.run_id }}/artifacts/oracle-iso" || true
            if [ -f /tmp/oracle-iso.zip ]; then
              unzip /tmp/oracle-iso.zip -d /mnt/iso || true
            fi
          fi

          if [ ! -f "/mnt/iso/${ISO_NAME}" ]; then
            echo "❌ ISO konnte nicht gefunden werden!"
            ls -R /mnt/iso || true
            exit 1
          fi
          echo "✅ ISO bereit für Build:"
          ls -lh /mnt/iso

      - name: ⚙️ Installiere Build-Tools
        run: |
          dnf -y install xorriso rsync p7zip unzip zip wget dmraid mdadm lvm2 device-mapper coreutils

      - name: 🧱 Starte ISO-Build
        run: |
          set -euo pipefail
          echo "🚀 Starte ISO-Build..."
          mkdir -p migration-live/buildinfo
          cp /mnt/iso/${ISO_NAME} migration-live/
          cd migration-live

          echo "=== Building Oracle Migration Live ISO (UEFI + BIOS) ==="

          # Extrahiere Inhalt
          echo ">>> Extrahiere ISO-Inhalt..."
          mkdir -p custom_iso
          xorriso -osirrox on -indev ${ISO_NAME} -extract / custom_iso

          echo ">>> Testausgabe: Beispielhafte Inhalte aus dem ISO:"
          ls -lh custom_iso | head -n 15

          # Prüfe Bootdateien
          echo ">>> Prüfe Bootdateien..."
          for file in custom_iso/isolinux/isolinux.bin custom_iso/isolinux/boot.cat custom_iso/images/efiboot.img; do
            if [ -f "$file" ]; then
              echo "✅ Gefunden: $(basename $file)"
            else
              echo "❌ Fehlende Bootdatei: $file"
              exit 5
            fi
          done

          echo ">>> Bereinige ISO-Inhalt für Minimal-Variante..."
          du -sh custom_iso || true

          echo ">>> Füge Overlay-Dateien hinzu..."
          rsync -a ../overlay/ custom_iso/

          echo ">>> Erzeuge bootfähiges Hybrid-ISO..."
          xorriso -as mkisofs \
            -r -V "MIGRATION-LIVE" \
            -o oracle-migration-live.iso \
            -J -l -b isolinux/isolinux.bin \
            -c isolinux/boot.cat \
            -no-emul-boot -boot-load-size 4 -boot-info-table \
            -eltorito-alt-boot \
            -e images/efiboot.img -no-emul-boot \
            -isohybrid-gpt-basdat custom_iso

          ls -lh oracle-migration-live.iso
          du -sh oracle-migration-live.iso

      - name: 🧾 Erzeuge Buildinfo
        run: |
          set -e
          mkdir -p migration-live/buildinfo
          dnf repolist > migration-live/buildinfo/dnf-repolist.txt || true
          dnf --version > migration-live/buildinfo/dnf-version.txt || true
          cat /etc/os-release > migration-live/buildinfo/os-release.txt || true
          uname -a > migration-live/buildinfo/uname.txt || true
          echo "🧾 Buildinfo gespeichert."

      - name: 📤 Lade Build-Ergebnis hoch
        uses: actions/upload-artifact@v4
        with:
          name: oracle-migration-live-iso
          path: |
            migration-live/oracle-migration-live.iso
            migration-live/buildinfo/

  test:
    name: 🧪 Test ISO Build
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Lade ISO Artifact
        uses: actions/download-artifact@v4
        with:
          name: oracle-migration-live-iso
          path: test_iso

      - name: 🔍 Prüfe ISO-Größe & Signatur
        run: |
          ls -lh test_iso/*.iso
          FILE=$(ls test_iso/*.iso | head -n1)
          echo ">>> Prüfe Boot-Signatur:"
          isoinfo -d -i "$FILE" | grep -E "Volume id|Boot|System id" || true

      - name: ✅ Abschluss
        run: echo "ISO-Test erfolgreich abgeschlossen."
