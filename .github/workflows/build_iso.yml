name: Build Oracle Migration Live ISO

on:
  push:
  workflow_dispatch:
  schedule:
    # üîÅ T√§glich um 03:00 UTC
    - cron: "0 3 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: oraclelinux:9

    env:
      ISO_DIR: migration-live
      ISO_NAME: OracleLinux-R9-latest-x86_64-dvd.iso
      ISO_URL: https://yum.oracle.com/ISOS/OracleLinux/OL9/latest/x86_64/OracleLinux-R9-latest-x86_64-dvd.iso
      BUILD_SCRIPT: build_migration_iso.sh

    steps:
    # ------------------------------------------------------------
    # üß© Repository holen
    # ------------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4

    # ------------------------------------------------------------
    # üíæ ISO-CACHE
    # ------------------------------------------------------------
    - name: Restore Oracle Linux Base ISO cache
      id: cache-iso
      uses: actions/cache@v4
      with:
        path: ${{ env.ISO_DIR }}/${{ env.ISO_NAME }}
        key: oraclelinux9-latest-dvd-cache

    # ------------------------------------------------------------
    # üì• ISO laden, wenn nicht im Cache
    # ------------------------------------------------------------
    - name: Download Oracle Linux Base ISO (if missing)
      if: steps.cache-iso.outputs.cache-hit != 'true'
      run: |
        set -e
        mkdir -p $ISO_DIR
        echo "üì¶ Lade Oracle Linux 9 Base ISO von:"
        echo "    $ISO_URL"
        dnf -y install wget
        wget --progress=dot:giga -O "$ISO_DIR/$ISO_NAME" "$ISO_URL"
        echo "‚úÖ Download abgeschlossen."

    # ------------------------------------------------------------
    # üíæ ISO direkt in Cache schreiben
    # ------------------------------------------------------------
    - name: Save Oracle Linux ISO to cache
      if: steps.cache-iso.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ${{ env.ISO_DIR }}/${{ env.ISO_NAME }}
        key: oraclelinux9-latest-dvd-cache

    # ------------------------------------------------------------
    # üíæ DNF Cache (optional, schneller)
    # ------------------------------------------------------------
    - name: Restore DNF cache
      id: cache-dnf
      uses: actions/cache@v4
      with:
        path: /var/cache/dnf
        key: dnf-cache-${{ runner.os }}-${{ hashFiles('**/build_migration_iso.sh') }}

    # ------------------------------------------------------------
    # üß∞ Dependencies installieren
    # ------------------------------------------------------------
    - name: Install build dependencies
      run: |
        dnf -y install oracle-epel-release-el9
        dnf -y install p7zip p7zip-plugins rsync wget xorriso zip unzip tar diffutils coreutils util-linux

    # ------------------------------------------------------------
    # üß© Preflight-Check
    # ------------------------------------------------------------
    - name: Preflight checks
      run: |
        echo "=== Repository Struktur pr√ºfen ==="
        test -f "$BUILD_SCRIPT" || (echo "‚ùå Fehlendes Build-Script!" && exit 1)
        test -d overlay || (echo "‚ùå Overlay-Ordner fehlt!" && exit 1)
        chmod +x "$BUILD_SCRIPT"
        echo "‚úÖ Struktur ok ‚Äì Build kann starten."

    # ------------------------------------------------------------
    # üöÄ ISO-Build ausf√ºhren
    # ------------------------------------------------------------
    - name: Build Oracle Migration ISO
      run: |
        echo "üöÄ Starte ISO-Build..."
        export ISO_SRC="$ISO_DIR/$ISO_NAME"
        ./build_migration_iso.sh

    # ------------------------------------------------------------
    # üì¶ Artefakte hochladen
    # ------------------------------------------------------------
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: oracle-migration-live-base
        path: |
          migration-live/oracle-migration-live.iso
          migration-live/build.log
